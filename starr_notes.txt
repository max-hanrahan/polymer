Starr Notes:


TODO: plot first graph, then

rerun sim 10 times from initial temp .5 to 1.5
Plot potential energy vs temperature
at some trans point, potential energy will give a big jump. I will be able to see the transition in phases

give it time to stabilize then plot initial temp (the direc numbers) with the avg potential energy (while stable)

how to mean the column from a certain index on:


combining 10 files from 10 directories to one place:
cat // (look 

xmgrace & 

bg

xmgrace ?.?/ls.da

edit > load comments


todo: ask how to automate this when done


commands I wanna run:
cd 0.5


cd 0.6
run 


counting stability:
0.5: 2000
0.6: 2000
0.7: 1000
0.8: 2000
0.9: 2000
1.0: 2000
1.1: 2000
1.2: 2000
1.3: 2500
1.4: 3000
1.5: 3000

9/23:
Let me show you some features you may or may not have noticed:

What would have been nice to fix is thermo_style: what kind of data you store. You could have added density so you can get a timeseries (and get avg from that)

xmblock 1:3 lj.dat # plots one
xmblock 1:3 0.8*/lj.dat # plots all the lj.dat in 0.80, 0.81...

You have to be careful when looking at when "something is happening". Try to be in the habit of looking at the "trace" data for each of your runs: esp pot energy and density bc pot E is very sensitive to steady state equilibrium. 

Further analysis: 

find melting -type f chmod 664 {} \; # finds everything that's a file and change it to read write read write read

next

find melting -type d chmod 775 {} \;
similar command to make directories not executable by everyone

look in coords.xyz (controlled by the dump command). Atom type is first col, then x y z, scroll down and eventually you see these evolving in time. 

I use OVITO for fisualization. It figures out how to load it in the GUI. Sometimes it's nice to see a movie of what you've done. 

What I want you to start you off with in that regard is how to understand the structure of the system better. Look at pair corr function (rad dist function). 

Formally, 
density as function of distance (from "you") / <density>

for an ideal gas, this is 1 uniformly. 

You can calculate g(r) for the system by generating a histogram. 

You only want to calculate (g(r)) for the configurations that have reached a steady state. Formally this is a density density correlation function:

g(r) = (<p(r') - p(r'')> - <p^2> )/(<p^2> - <p>^2)

as is the definition of any corr function. Since these are point particles:

p(r) = sum (k.delta(r-r_j)) from j = 1 to N

Periodic BC's:
How do we avoid the influence of the confining surface on the sim?

Do it like PAC-Man (no walls). 

If box size were less than 5, a particle could "see" its won image. So box size L should always be \geq 2 r_c, where r_c is the cuttoff radius for LJ potential (usually 2.5 stdev's of r). 

if you calculate r_{ij} = r_i - r_j
= (xi - xj)ihat + ...
you have to chek:
if deltax > L/2 -> deltax = deltax - L
if deltax < -L/2 -> deltax = deltax +L

this is called the MINIMUM IMAGE CONVENTION. Ensures that you look at the closest two pairs of particles, 

TODO: calculate g(r) of coordinate files. 

In lammps there's a file called grxyz.c. Needs coords.xyz
first line tells it how many atoms there are. 

Normalization goes by Vol / (num pairs * shell volume), which simplifies to V/(2n(n-1) pi dr r^2)

todo: chenge this code so it averages over multiple configurations in the xyz file. Also add to it the functionality that you can skip the first n configurations (feed it in to the command line). 

Also redo the whole thing in python. 


10/3:
REminder: ask for a lit review via email. 

Apparently Hamed (?) optimized a lot of stuff to python.  We use non-bonded interactions, usually. But bonded interactions are more Hamed's thing (not well implemented in Lammps)
We may be more motivated to use NamD, GroMax, Charm... but many of these are more biologists stuff. 
HoomD is the best one for phys so far (acc to Starr)

Todo: for reading, consider some of Rob McFarland's stuff from MIT. Specifically polymer nanoparticles and self-assembly. 

For my lit review, I will likely review 1-2 papers.

CP2K is an open source package for DFT. Gaussian can also do DFT. (George Peterson, of wes, helped develop it)

Rakib notes: finding timestep difference. A certain paper used dt = 0.005 (inverse plasma frq). 


10/7:

Miller interface. 111 is the plane-vector for a triangular lattice. 

read in configs and read in the log file and use info from both. 

Fluctuating box size: there are things that get annoying of box size changes. If we want to follow a fixed-pressure path of pressure, we simulate at the correct equil box size. The only challenge is we don't know what the correct box size, so we follow that path to find that. Box size as a func of temp will change at fixed pressure. 

engage your audience. You can never go too simple. Don't be shy abt history, it will typically engender better conversation. 

New starter project:

caesar's old work: the stiffness of what is added has a substantial impact on polymer properties. 
Add rod-like (rigid) nanoparticles and play with the stiffness. Take the polymers that already exist, choose a subset of them (5-10%) and stiffen. 
Stiffen: change the potential's variance with respect to angle's variance.  

Easy to add angle potential in LAMPPS. 

How to get started: 

set up 5-10% of them being stiff. Tell it how many chains you want to have this additional angle potential, and have the script read in that number .

The natural thing is to put the angle potential on the first set of chains. But historically we have the polymers at the front end of the list. Thistime put the stiffened chains at the end. 
Start printing out the angle ID's /configs at the stiffened chains, which are at the end. 

Start with 5%, meaning this print statement would start with 7600. 
Have this flexible. PRint to user num atoms and chain length. 

BE CAREFUL THAT THE ONLY ANGLE POTENTIALS ARE OF A SINGLE CHAIN. 

By next week I hope to have a draft pppt

10/10:

how do we get from rigid polymers to 

todo: comment out bond. 


10/14:

To get to an equilibrium, we need more time, stronger k, and they are spatially co-located with each other

Instead of picking the last 20 chains we could pick them at random. But that would make for an inconvenient coord file.

Instaead we could introduce another particle type. 

The last 400 in the input file would have type 2 instead of 1. To avoid having them all in the same spot, you could pick every 20th chain (rather than the last 400). 


Index 381 iw the start of chain 20. Instead of 381 it becomes 7601

401 is at chain 21 -> 20, and 

10/17:

When last we spoke, we were simulating 400 polymers, each with 20 monomers, and added an angular spring-like potential to the last 20 polys. 
Now we distributed the "stiffened" polymers to be every 20 steps, and I just reran that. 

To not lose sight of the big picure, redistributing the polymers was meant as one of three factors we wanted to address to get the system to equilibrium. 
The other two factors was longer time and stronger k-value. But keeping those as they were for now, I was able to complete a run (doesn't take long!)

todo: sort, make them ints. 